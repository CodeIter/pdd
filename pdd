#!/usr/bin/env python3
#
# Date, time diff calculator.
#
# Copyright © 2017 Arun Prakash Jana <engineerarun@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import calendar
from datetime import date
from dateutil.relativedelta import relativedelta
import sys
import time

# Globals

monthdict = {name.lower(): num
             for num, name in enumerate(calendar.month_abbr) if num}
_VERSION_ = '1.0'  # current program version


def is_int(arg):
    '''Check if arg is a digit

    :param arg: input string
    :return: True on success, False on exception
    '''

    try:
        int(arg)
        return True
    except Exception:
        return False


def gethms(h, m, s):
    '''Convert empty string to 0 and return hour, min, sec'''

    if h == '':
        h = 0
    if m == '':
        m = 0
    if s == '':
        s = 0

    return h, m, s


def gettime(arg):
    '''Parse and return hour, min, sec'''

    lst = arg.split(':')
    n = len(lst)

    if n == 3:
        return lst[0], lst[1], lst[2]
    if n == 2:
        return 0, lst[0], lst[1]
    if n == 1:
        return 0, 0, lst[0]

    return None, None, None


class ExtendedArgumentParser(argparse.ArgumentParser):
    '''Extend classic argument parser'''

    # Print additional help and info
    @staticmethod
    def print_extended_help(file=None):
        if not file:
            file = sys.stderr

        file.write('''
Version %s
Copyright © 2017 Arun Prakash Jana <engineerarun@gmail.com>
License: GPLv3
Webpage: https://github.com/jarun/pdd
''' % _VERSION_)

    # Help
    def print_help(self, file=None):
        super(ExtendedArgumentParser, self).print_help(file)
        self.print_extended_help(file)


def parse_args(args=None, namespace=None):
    '''Parse arguments/options.
    Parameters
    ----------
    args : list, optional
        Arguments to parse. Default is ``sys.argv``.
    namespace : argparse.Namespace
        Namespace to write to. Default is a new namespace.
    Returns
    -------
    argparse.Namespace
        Namespace with parsed arguments / options.
    '''

    argparser = ExtendedArgumentParser(
                    description='Date, time difference calculator.')
    addarg = argparser.add_argument
    addarg('-d', dest='date', nargs=6,
           metavar=('dd', 'mmm', 'yyyy', 'dd', 'mmm', 'yyyy'),
           help='calculate date difference')
    addarg('-t', dest='time', nargs=2, metavar=('hh:mm:ss', 'hh:mm:ss'),
           help='calculate time difference')

    # Show help and exit if no arguments
    if len(sys.argv) < 2:
        # argparser.print_help(sys.stderr)
        t = time.localtime()
        print('%s, %02d %s %d %02d:%02d:%02d %s' % (
                calendar.day_abbr[t.tm_wday],
                t.tm_mday, calendar.month_abbr[t.tm_mon], t.tm_year,
                t.tm_hour, t.tm_min, t.tm_sec, t.tm_zone))
        sys.exit(1)

    return argparser.parse_args(args, namespace)


def main():
    args = parse_args()

    if args.date is not None:
        try:
            d0 = date(int(args.date[2]), int(args.date[1])
                      if is_int(args.date[1])
                      else monthdict[args.date[1].lower()],
                      int(args.date[0]))
            d1 = date(int(args.date[5]), int(args.date[4])
                      if is_int(args.date[4])
                      else monthdict[args.date[4].lower()],
                      int(args.date[3]))

            if (d0 < d1):
                d0, d1 = d1, d0

            delta = d0 - d1
            rdelta = relativedelta(d0, d1)
            print('%dy %dm %dd'
                  % (rdelta.years, rdelta.months, rdelta.days))
            print('%dd' % delta.days)
        except (ValueError, KeyError) as e:
            print(e)

    if args.time is not None:
        try:
            h, m, s = gettime(args.time[0])
            h, m, s = gethms(h, m, s)
            t0 = int(h) * 3600 + int(m) * 60 + int(s)

            h, m, s = gettime(args.time[1])
            h, m, s = gethms(h, m, s)
            t1 = int(h) * 3600 + int(m) * 60 + int(s)

            m, s = divmod(abs(t0 - t1), 60)
            h, m = divmod(m, 60)

            print('%02d:%02d:%02d' % (h, m, s))
            print('%ds' % abs(t0 - t1))
        except (ValueError, TypeError) as e:
            print(e)


if __name__ == '__main__':
    main()
